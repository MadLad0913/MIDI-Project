/*
  =================================================================================================
  MIDI.cpp
  Created 9 March, 2020
  Author: Micah Stone
  =================================================================================================
*/

#include <iostream>
#include <algorithm>
#include <array>
#include <cstdint>
#include <fstream>
#include <list>
#include <string>
#include <vector>

#define _SILENCE_EXPERIMENTAL_FILESYSTEM_DEPRECATION_WARNING
#define OLC_PGE_APPLICATION


struct MidiEvent
{
	enum class Type
	{
		NoteOff,
		NoteOn,
		Other
	} event;

	uint8_t nKey = 0;
	uint8_t nVelocity = 0;
	uint32_t nDeltaTick = 0;
};

struct MidiNote
{
	uint8_t nKey = 0;
	uint8_t nVelocity = 0;
	uint32_t nStartTime = 0;
	uint32_t nDuration = 0;
};

struct MidiTrack
{
	std::string sName;
	std::string sInstrument;
	std::vector<MidiEvent> vecEvents;
	std::vector<MidiNote> vecNotes;
	uint8_t nMaxNote = 64;
	uint8_t nMinNote = 64;
};

class MidiFile
{
public:
	enum EventName : uint8_t
	{
		VoiceNoteOff = 0x80,
		VoiceNoteOn = 0x90,
		VoiceAftertouch = 0xA0,
		VoiceControlChange = 0xB0,
		VoiceProgramChange = 0xC0,
		VoiceChannelPressure = 0xD0,
		VoicePitchBend = 0xE0,
		SystemExclusive = 0xF0,
	};

	enum MetaEventName : uint8_t
	{
		MetaSequence = 0x00,
		MetaText = 0x01,
		MetaCopyright = 0x02,
		MetaTrackName = 0x03,
		MetaInstrumentName = 0x04,
		MetaLyrics = 0x05,
		MetaMarker = 0x06,
		MetaCuePoint = 0x07,
		MetaChannelPrefix = 0x20,
		MetaEndOfTrack = 0x2F,
		MetaSetTempo = 0x51,
		MetaSMPTEOffset = 0x54,
		MetaTimeSignature = 0x58,
		MetaKeySignature = 0x59,
		MetaSequencerSpecific = 0x7F,
	};


public:
	MidiFile()
	{
	}

	MidiFile(const std::string& sFileName)
	{
		ParseFile(sFileName);
	}

	void Clear()
	{
	}

	bool ParseFile(const std::string& sFileName)
	{
		//Open the MIDI File as a Stream
		std::ifstream file;
		file.open(sFileName, std::fstream::in | std::ios::binary);
		if (!file.is_open())
			return false;

		//Swaps Byte Order of 32-Bit Integer
		auto Swap32 = [](uint32_t n)
		{
			return (((n >> 24) & 0xff) | ((n << 8) & 0xff0000) | ((n >> 8) & 0xff00) | ((n << 24) & 0xff000000));
		};

		//Swaps Byte Order of 16-bit Integer
		auto Swap16 = [](uint16_t n)
		{
			return ((n >> 8) | (n << 8));
		};

		//Reads nLength Bytes from File Stream, and Constructs a Text String
		auto ReadString = [&file](uint32_t nLength)
		{
			std::string s;
			for (uint32_t i = 0; i < nLength; i++) s += file.get();
			return s;
		};

		auto ReadValue = [&file]()
		{
			uint32_t nValue = 0;
			uint8_t nByte = 0;

			//Read Byte
			nValue = file.get();
			//Check Most Significant Bit
			if (nValue & 0x80)
			{
				//Extract 7 Bits of Read Byte
				nValue &= 0x7F;

				do
				{
					//Read Next Byte
					nByte = file.get();
					//Construct Value by Setting bottom 7 Bits, Then Shift by 7 Bits
					nValue = (nValue << 7) | (nByte & 0x7F);
				} while (nByte & 0x80); //Loop While MSB is 1
			}

			//Return Final Construction (Always 32-Bit Unsigned Integer Internally)
			return nValue;
		};

		//=========================================================================================
		// PARSE MIDI FILE
		//=========================================================================================

		uint32_t n32 = 0;
		uint16_t n16 = 0;

		//=======================================
		// MIDI HEADER
		//=======================================
		file.read((char*)&n32, sizeof(uint32_t));
		uint32_t nFileID = Swap32(n32);
		//=======================================
		file.read((char*)&n32, sizeof(uint32_t));
		uint32_t nHeaderLength = Swap32(n32);
		//=======================================
		file.read((char*)&n16, sizeof(uint16_t));
		uint16_t nFormat = Swap16(n16);
		//=======================================
		file.read((char*)&n16, sizeof(uint16_t));
		uint16_t nTrackChunks = Swap16(n16);
		//=======================================
		file.read((char*)&n16, sizeof(uint16_t));
		uint16_t nDivison = Swap16(n16);
		//=======================================

		for (uint16_t nChunk = 0; nChunk < nTrackChunks; nChunk++)
		{
			std::cout << "===== NEW TRACK" << std::endl;
			//=======================================
			// TRACK HEADER
			//=======================================
			file.read((char*)&n32, sizeof(uint32_t));
			uint32_t nTrackID = Swap32(n32);
			//=======================================
			file.read((char*)&n32, sizeof(uint32_t));
			uint32_t nTrackLength = Swap32(n32);
			//=======================================

			bool bEndOfTrack = false;

			vecTracks.push_back(MidiTrack());

			uint32_t nWallTime = 0;

			uint8_t nPreviousStatus = 0;

			//=======================================
			// READ MIDI EVENTS IN TRACK
			//=======================================
			while (!file.eof() && !bEndOfTrack)
			{
				uint32_t nStatusTimeDelta = 0;
				uint8_t nStatus = 0;

				//Read Delta Time
				nStatusTimeDelta = ReadValue();
				nStatus = file.get();

				//Read MIDI Running Status
				if (nStatus < 0x80)
				{
					nStatus = nPreviousStatus;
					file.seekg(-1, std::ios_base::cur);
				}

				//================================================================================================================
				if ((nStatus & 0xF0) == EventName::VoiceNoteOff)
				{
					nPreviousStatus = nStatus;
					uint8_t nChannel = nStatus & 0x0F;
					uint8_t nNoteID = file.get();
					uint8_t nNoteVelocity = file.get();
					vecTracks[nChunk].vecEvents.push_back({ MidiEvent::Type::NoteOff, nNoteID, nNoteVelocity, nStatusTimeDelta });
				}
				//================================================================================================================
				else if ((nStatus & 0xF0) == EventName::VoiceNoteOn)
				{
					nPreviousStatus = nStatus;
					uint8_t nChannel = nStatus & 0x0F;
					uint8_t nNoteID = file.get();
					uint8_t nNoteVelocity = file.get();
					if (nNoteVelocity == 0)
						vecTracks[nChunk].vecEvents.push_back({ MidiEvent::Type::NoteOff, nNoteID, nNoteVelocity, nStatusTimeDelta });
					else
						vecTracks[nChunk].vecEvents.push_back({ MidiEvent::Type::NoteOn, nNoteID, nNoteVelocity, nStatusTimeDelta });
				}
				//================================================================================================================
				else if ((nStatus & 0xF0) == EventName::VoiceAftertouch)
				{
					nPreviousStatus = nStatus;
					uint8_t nChannel = nStatus & 0x0F;
					uint8_t nNoteID = file.get();
					uint8_t nNoteVelocity = file.get();
					vecTracks[nChunk].vecEvents.push_back({ MidiEvent::Type::Other });
				}
				//================================================================================================================
				else if ((nStatus & 0xF0) == EventName::VoiceControlChange)
				{
					nPreviousStatus = nStatus;
					uint8_t nChannel = nStatus & 0x0F;
					uint8_t nNoteID = file.get();
					uint8_t nNoteVelocity = file.get();
					vecTracks[nChunk].vecEvents.push_back({ MidiEvent::Type::Other });
				}
				//================================================================================================================
				else if ((nStatus & 0xF0) == EventName::VoiceProgramChange)
				{
					nPreviousStatus = nStatus;
					uint8_t nChannelID = nStatus & 0x0F;
					uint8_t nProgramID = file.get();
					vecTracks[nChunk].vecEvents.push_back({ MidiEvent::Type::Other });
				}
				//================================================================================================================
				else if ((nStatus & 0xF0) == EventName::VoiceChannelPressure)
				{
					nPreviousStatus = nStatus;
					uint8_t nChannelID = nStatus & 0x0F;
					uint8_t nProgramID = file.get();
					vecTracks[nChunk].vecEvents.push_back({ MidiEvent::Type::Other });
				}
				//================================================================================================================
				else if ((nStatus & 0xF0) == EventName::VoicePitchBend)
				{
					nPreviousStatus = nStatus;
					uint8_t nChannel = nStatus;
					uint8_t nLS7B = file.get();
					uint8_t nMS7B = file.get();
					vecTracks[nChunk].vecEvents.push_back({ MidiEvent::Type::Other });
				}
				//================================================================================================================
				else if ((nStatus & 0xF0) == EventName::SystemExclusive)
				{
					nPreviousStatus = 0;

					if (nStatus == 0xF0)
					{
						//System Exclusive Message Begin
						std::cout << "System Exclusive Begin: " << ReadString(ReadValue()) << std::endl;
					}

					if (nStatus == 0xF7)
					{
						//System Exclusive Message Begin
						std::cout << "System Exclusive End: " << ReadString(ReadValue()) << std::endl;
					}

					if (nStatus == 0xFF)
					{
						uint8_t nType = file.get();
						uint8_t nLength = ReadValue();

						switch (nType)
						{
						case MetaSequence:
							std::cout << "Sequence Number: " << file.get() << file.get() << std::endl;
							break;
						case MetaText:
							std::cout << "Text: " << ReadString(nLength) << std::endl;
							break;
						case MetaCopyright:
							std::cout << "Copyright: " << ReadString(nLength) << std::endl;
							break;
						case MetaTrackName:
							vecTracks[nChunk].sName = ReadString(nLength);
							std::cout << "Track Name: " << vecTracks[nChunk].sName << std::endl;
							break;
						case MetaInstrumentName:
							vecTracks[nChunk].sInstrument = ReadString(nLength);
							std::cout << "Instrument Name: " << vecTracks[nChunk].sInstrument << std::endl;
							break;
						case MetaLyrics:
							std::cout << "Lyrics: " << ReadString(nLength) << std::endl;
							break;
						case MetaMarker:
							std::cout << "Marker: " << ReadString(nLength) << std::endl;
							break;
						case MetaCuePoint:
							std::cout << "Cue: " << ReadString(nLength) << std::endl;
							break;
						case MetaChannelPrefix:
							std::cout << "Prefix: " << file.get() << std::endl;
							break;
						case MetaEndOfTrack:
							bEndOfTrack = true;
							break;
						case MetaSetTempo:
							// Tempo is in microseconds per quarter note	
							if (m_nTempo == 0)
							{
								(m_nTempo |= (file.get() << 16));
								(m_nTempo |= (file.get() << 8));
								(m_nTempo |= (file.get() << 0));
								m_nBPM = (60000000 / m_nTempo);
								std::cout << "Tempo: " << m_nTempo << " (" << m_nBPM << "bpm)" << std::endl;
							}
							break;
						case MetaSMPTEOffset:
							std::cout << "SMPTE: H:" << file.get() << " M:" << file.get() << " S:" << file.get() << " FR:" << file.get() << " FF:" << file.get() << std::endl;
							break;
						case MetaTimeSignature:
							std::cout << "Time Signature: " << file.get() << "/" << (2 << file.get()) << std::endl;
							std::cout << "ClocksPerTick: " << file.get() << std::endl;

							// A MIDI "Beat" is 24 ticks, so specify how many 32nd notes constitute a beat
							std::cout << "32per24Clocks: " << file.get() << std::endl;
							break;
						case MetaKeySignature:
							std::cout << "Key Signature: " << file.get() << std::endl;
							std::cout << "Minor Key: " << file.get() << std::endl;
							break;
						case MetaSequencerSpecific:
							std::cout << "Sequencer Specific: " << ReadString(nLength) << std::endl;
							break;
						default:
							std::cout << "Unrecognised MetaEvent: " << nType << std::endl;
						}
					}
				}
				else
				{
					std::cout << "ERROR: Unrecognised Status Byte: " << nStatus << std::endl;
				}

			}
		}

		//Convert Time Events to Notes
		for (auto& track : vecTracks)
		{
			uint32_t nWallTime = 0;

			std::list<MidiNote> listNotesBeingProcessed;

			for (auto& event : track.vecEvents)
			{
				nWallTime += event.nDeltaTick;

				if (event.event == MidiEvent::Type::NoteOn)
				{
					//New Note
					listNotesBeingProcessed.push_back({ event.nKey, event.nVelocity, nWallTime, 0 });
				}

				if (event.event == MidiEvent::Type::NoteOff)
				{
					auto note = std::find_if(listNotesBeingProcessed.begin(), listNotesBeingProcessed.end(), [&](const MidiNote& n) { return n.nKey == event.nKey; });
					if (note != listNotesBeingProcessed.end())
					{
						note->nDuration = nWallTime - note->nStartTime;
						track.vecNotes.push_back(*note);
						track.nMinNote = std::min(track.nMinNote, note->nKey);
						track.nMaxNote = std::max(track.nMaxNote, note->nKey);
						listNotesBeingProcessed.erase(note);
					}
				}
			}
		}

		return true;

	}

public:
	std::vector<MidiTrack> vecTracks;
	uint32_t m_nTempo = 0;
	uint32_t m_nBPM = 0;
};
